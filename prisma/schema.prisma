// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          ROLE
  gender        GENDER?   @default(MALE)
  address       String?    @db.Text
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
  vouchers      Voucher[]
  facilities    Facility[]
  memberUsers   MemberUser?
  transactions  Transaction[]
  scanTickets   ScanTicket[]


  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ticket {
  id            String    @id @default(cuid())
  name          String
  quantity      Int
  price         Int
  status        Boolean   @default(false)
  fromDate      DateTime
  toDate        DateTime
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  transactions  Transaction[]
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@unique([fromDate, toDate])
  @@map("tickets")
}

model MemberUser {
  id            String      @id @default(cuid())
  image         String
  discount      Float       @default(0.3)
  userId        String      @unique
  acceptedBy    String?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedAt    DateTime?   
  transactions  Transaction[]
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@unique([userId, acceptedBy])
  @@map("memberUsers")
}

model Voucher {
  id          String      @id @default(cuid())
  name        String      @unique
  total       Int
  discount    Float
  status      Boolean     @default(false)
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  transactions Transaction[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  @@map("vouchers")
}

model Facility {
  id            String      @id @default(cuid())
  name          String
  description   String      @db.Text
  image         String
  category_age  String
  capacities    String
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@map("facilities")
}

model Transaction {
  id            String      @id @default(cuid())
  quantity      Int
  price         Int
  gross_amount  Int
  status        TRANSACTION_STATUS    @default(PENDING)
  snap_token    String      @unique
  payment_type  String?
  expired       DateTime
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  ticketId      String
  ticket        Ticket      @relation(fields: [ticketId], references: [id])
  memberUserId  String?
  memberUser    MemberUser? @relation(fields: [memberUserId], references: [id])
  voucherId     String?
  voucher       Voucher?    @relation(fields: [voucherId], references: [id])
  scanTickets   ScanTicket?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt


  @@unique([userId, voucherId])
  @@map("transactions")
}

model ScanTicket {
  id              String        @id @default(cuid())
  transactionId   String        @unique
  transaction     Transaction   @relation(fields: [transactionId], references: [id])
  status          Boolean       @default(false)
  acceptedBy      String?
  user            User?          @relation(fields: [acceptedBy],references: [id])
  scannedAt       DateTime
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@map("scanTickets")
}

enum ROLE {
  ADMIN
  REGULAR
}

enum GENDER {
  MALE
  FEMALE
}

enum TRANSACTION_STATUS {
  PENDING
  SUCCESS
  FAILURE
}